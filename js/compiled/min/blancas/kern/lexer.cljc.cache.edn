{:rename-macros {}, :renames {}, :externs {parseInt {}, String {fromCodePoint {}}, eval {}}, :use-macros {<*> blancas.kern.core, i18n blancas.kern.i18n, fmt blancas.kern.i18n, >>= blancas.kern.core, lower-case clojure.string, <:> blancas.kern.core, >> blancas.kern.core, <?> blancas.kern.core, <|> blancas.kern.core, <+> blancas.kern.core, << blancas.kern.core}, :excludes #{}, :name blancas.kern.lexer, :imports nil, :requires {k blancas.kern.core, blancas.kern.core blancas.kern.core, blancas.kern.i18n blancas.kern.i18n, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses {<*> blancas.kern.core, i18n blancas.kern.i18n, fmt blancas.kern.i18n, >>= blancas.kern.core, lower-case clojure.string, <:> blancas.kern.core, >> blancas.kern.core, <?> blancas.kern.core, <|> blancas.kern.core, <+> blancas.kern.core, << blancas.kern.core}, :defs {c-esc-hex {:name blancas.kern.lexer/c-esc-hex, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 454, :column 1, :end-line 454, :end-column 15, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 454, :column 6, :end-line 454, :end-column 15}, :doc "Parses a hex escape code; the result is the encoded char.", :tag any}, dot {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 282, :column 10, :end-line 282, :end-column 13, :dynamic true, :arglists (quote ([])), :doc "Parses a single dot; then calls (trim)."}, :name blancas.kern.lexer/dot, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 282, :end-line 282, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a single dot; then calls (trim)."}, one-of {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 148, :column 10, :end-line 148, :end-column 16, :dynamic true, :arglists (quote ([cs])), :doc "Succeeds if the next character is in the supplied string.\n          Calls (trim) afterwards."}, :name blancas.kern.lexer/one-of, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 16, :method-params ([cs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cs])), :doc "Succeeds if the next character is in the supplied string.\n          Calls (trim) afterwards."}, brackets {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 264, :column 10, :end-line 264, :end-column 18, :dynamic true, :arglists (quote ([p])), :doc "Applies parser p skiping over surrounding brackets.\n          Calls (trim) after the opening bracket, after p, and after\n          the closing bracket."}, :name blancas.kern.lexer/brackets, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 18, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Applies parser p skiping over surrounding brackets.\n          Calls (trim) after the opening bracket, after p, and after\n          the closing bracket."}, semi-sep1 {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 291, :column 10, :end-line 291, :end-column 19, :dynamic true, :arglists (quote ([])), :doc "Applies parser p one or more times, skiping over separating\n          semicolons. Calls (trim) after each p and semicolon."}, :name blancas.kern.lexer/semi-sep1, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 291, :end-line 291, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Applies parser p one or more times, skiping over separating\n          semicolons. Calls (trim) after each p and semicolon."}, map->LanguageDef {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 24, :column 12, :end-line 24, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__42237]))}, :name blancas.kern.lexer/map->LanguageDef, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 23, :method-params ([G__42237]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__42237]))}, esc-char {:name blancas.kern.lexer/esc-char, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 394, :column 1, :end-line 394, :end-column 14, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 394, :column 6, :end-line 394, :end-column 14}, :doc "Parses an escape code for a basic char.", :tag any}, map->TokenParsers {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 95, :column 12, :end-line 95, :end-column 24, :internal-ctor true, :factory :map, :arglists (quote ([G__42247]))}, :name blancas.kern.lexer/map->TokenParsers, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 24, :method-params ([G__42247]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__42247]))}, block-rest {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 370, :column 7, :end-line 370, :end-column 17, :arglists (quote ([rec])), :doc "Parses the contents and end of a block comment."}, :name blancas.kern.lexer/block-rest, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 17, :method-params ([rec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 370, :end-line 370, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rec])), :doc "Parses the contents and end of a block comment."}, read-num-lit {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 544, :column 7, :end-line 544, :end-column 19, :arglists (quote ([x]))}, :name blancas.kern.lexer/read-num-lit, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 544, :end-line 544, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, haskell-char {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 501, :column 7, :end-line 501, :end-column 19, :arglists (quote ([c])), :doc "Parses Haskell character literals."}, :name blancas.kern.lexer/haskell-char, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 19, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 501, :end-line 501, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Parses Haskell character literals."}, char-code {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 400, :column 7, :end-line 400, :end-column 16, :arglists (quote ([c]))}, :name blancas.kern.lexer/char-code, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, basic-char {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 405, :column 7, :end-line 405, :end-column 17, :arglists (quote ([c])), :doc "Parses an unquoted character literal. Character c must be escaped."}, :name blancas.kern.lexer/basic-char, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 17, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 405, :end-line 405, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Parses an unquoted character literal. Character c must be escaped."}, oct-lit {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 219, :column 10, :end-line 219, :end-column 17, :dynamic true, :arglists (quote ([])), :doc "Parses an octal number as Long or BigInt depending on the\n          magnitude or if it ends with N. Calls (trim) afterward."}, :name blancas.kern.lexer/oct-lit, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 219, :end-line 219, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses an octal number as Long or BigInt depending on the\n          magnitude or if it ends with N. Calls (trim) afterward."}, bool-lit {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 236, :column 10, :end-line 236, :end-column 18, :dynamic true, :arglists (quote ([])), :doc "Parses a boolean value, true or false, comparing according to\n          :case-sensitive. Calls (trim) afterward."}, :name blancas.kern.lexer/bool-lit, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 236, :end-line 236, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a boolean value, true or false, comparing according to\n          :case-sensitive. Calls (trim) afterward."}, basic-def {:name blancas.kern.lexer/basic-def, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 39, :column 1, :end-line 39, :end-column 15, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 39, :column 6, :end-line 39, :end-column 15}, :doc "The most basic record; for use to build new styles.", :tag any}, comma-sep {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 296, :column 10, :end-line 296, :end-column 19, :dynamic true, :arglists (quote ([])), :doc "Applies parser p zero or more times, skiping over separating\n          commas. Calls (trim) after each p and comma."}, :name blancas.kern.lexer/comma-sep, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 296, :end-line 296, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Applies parser p zero or more times, skiping over separating\n          commas. Calls (trim) after each p and comma."}, java-style-def {:name blancas.kern.lexer/java-style-def, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 66, :column 1, :end-line 66, :end-column 20, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 66, :column 6, :end-line 66, :end-column 20}, :doc "Lexical settings for Java-style languages.", :tag any}, nil-lit {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 241, :column 10, :end-line 241, :end-column 17, :dynamic true, :arglists (quote ([])), :doc "Parses a null value, nil or null, comparing according to\n          :case-sensitive. Calls (trim) afterward."}, :name blancas.kern.lexer/nil-lit, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 241, :end-line 241, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a null value, nil or null, comparing according to\n          :case-sensitive. Calls (trim) afterward."}, java-char {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 430, :column 7, :end-line 430, :end-column 16, :arglists (quote ([c])), :doc "Parses an unquoted Java character literal. Character c must be escaped."}, :name blancas.kern.lexer/java-char, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 430, :end-line 430, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Parses an unquoted Java character literal. Character c must be escaped."}, c-esc-char {:name blancas.kern.lexer/c-esc-char, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 440, :column 1, :end-line 440, :end-column 16, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 440, :column 6, :end-line 440, :end-column 16}, :doc "Parses an escape code for a C char.", :tag any}, haskell-style-def {:name blancas.kern.lexer/haskell-style-def, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 56, :column 1, :end-line 56, :end-column 23, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 56, :column 6, :end-line 56, :end-column 23}, :doc "Lexical settings for Haskell-style languages.", :tag any}, angles {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 258, :column 10, :end-line 258, :end-column 16, :dynamic true, :arglists (quote ([p])), :doc "Applies parser p skiping over surrounding angle brackets.\n          Calls (trim) after the opening bracket, after p, and after\n          the closing bracket."}, :name blancas.kern.lexer/angles, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 258, :end-line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Applies parser p skiping over surrounding angle brackets.\n          Calls (trim) after the opening bracket, after p, and after\n          the closing bracket."}, make-parsers {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 548, :column 7, :end-line 548, :end-column 19, :arglists (quote ([rec])), :doc "Returns a function map that corresponds to the customization\n   values of the input record, whose fields are as follows:\n\n   :type                Identifies the type of settings.\n   :comment-start       A string that marks the start of a block comment.\n   :comment-end         A string that marks the end of a block comment.\n   :comment-line        A string that marks the start of a line comment.\n   :nested-comments     Whether the lexer accepts nested comments; a boolean.\n   :identifier-start    A parser for the start of an identifier.\n   :identifier-letter   A parser for the subsequent characters of an identifier.\n   :reserved-names      A list of names that cannot be identifiers.\n   :case-sensitive      Whether tokens are case-sensitive; a boolean.\n   :line-continuation   A parser for the token that precedes the new line.\n   :trim-newline        Treats newline character(s) as whitespace.\n   :leading-sign        Whether numbers accept an optional leading sign."}, :name blancas.kern.lexer/make-parsers, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 19, :method-params ([rec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 548, :end-line 548, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rec])), :doc "Returns a function map that corresponds to the customization\n   values of the input record, whose fields are as follows:\n\n   :type                Identifies the type of settings.\n   :comment-start       A string that marks the start of a block comment.\n   :comment-end         A string that marks the end of a block comment.\n   :comment-line        A string that marks the start of a line comment.\n   :nested-comments     Whether the lexer accepts nested comments; a boolean.\n   :identifier-start    A parser for the start of an identifier.\n   :identifier-letter   A parser for the subsequent characters of an identifier.\n   :reserved-names      A list of names that cannot be identifiers.\n   :case-sensitive      Whether tokens are case-sensitive; a boolean.\n   :line-continuation   A parser for the token that precedes the new line.\n   :trim-newline        Treats newline character(s) as whitespace.\n   :leading-sign        Whether numbers accept an optional leading sign."}, none-of {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 153, :column 10, :end-line 153, :end-column 17, :dynamic true, :arglists (quote ([])), :doc "Succeeds if the next character is not in the supplied string.\n          Calls (trim) afterwards."}, :name blancas.kern.lexer/none-of, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 153, :end-line 153, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Succeeds if the next character is not in the supplied string.\n          Calls (trim) afterwards."}, sign {:name blancas.kern.lexer/sign, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 532, :column 1, :end-line 532, :end-column 10, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 532, :column 6, :end-line 532, :end-column 10}, :tag any}, LanguageDef {:num-fields 12, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name blancas.kern.lexer/LanguageDef, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 23, :type true, :column 12, :internal-ctor true, :line 24, :record true, :end-line 24, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, str-parser {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 518, :column 7, :end-line 518, :end-column 17, :arglists (quote ([lex f])), :doc "Parses string literals delimited by double quotes."}, :name blancas.kern.lexer/str-parser, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 17, :method-params ([lex f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 518, :end-line 518, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lex f])), :doc "Parses string literals delimited by double quotes."}, ->TokenParsers {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 95, :column 12, :end-line 95, :end-column 24, :internal-ctor true, :factory :positional, :arglists (quote ([trim lexeme sym new-line one-of none-of token word identifier field char-lit string-lit dec-lit oct-lit hex-lit float-lit bool-lit nil-lit parens braces angles brackets semi comma colon dot semi-sep semi-sep1 comma-sep comma-sep1]))}, :name blancas.kern.lexer/->TokenParsers, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 24, :method-params ([trim lexeme sym new-line one-of none-of token word identifier field char-lit string-lit dec-lit oct-lit hex-lit float-lit bool-lit nil-lit parens braces angles brackets semi comma colon dot semi-sep semi-sep1 comma-sep comma-sep1]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 95, :end-line 95, :max-fixed-arity 30, :fn-var true, :arglists (quote ([trim lexeme sym new-line one-of none-of token word identifier field char-lit string-lit dec-lit oct-lit hex-lit float-lit bool-lit nil-lit parens braces angles brackets semi comma colon dot semi-sep semi-sep1 comma-sep comma-sep1]))}, c-char {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 461, :column 7, :end-line 461, :end-column 13, :arglists (quote ([c])), :doc "Parses an unquoted C character literal. Character c must be escaped."}, :name blancas.kern.lexer/c-char, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 13, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 461, :end-line 461, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Parses an unquoted C character literal. Character c must be escaped."}, TokenParsers {:num-fields 30, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name blancas.kern.lexer/TokenParsers, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 24, :type true, :column 12, :internal-ctor true, :line 95, :record true, :end-line 95, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, parens {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 246, :column 10, :end-line 246, :end-column 16, :dynamic true, :arglists (quote ([p])), :doc "Applies parser p skiping over surrounding parenthesis.\n          Calls (trim) after the opening paren, after p, and after\n          the closing paren."}, :name blancas.kern.lexer/parens, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Applies parser p skiping over surrounding parenthesis.\n          Calls (trim) after the opening paren, after p, and after\n          the closing paren."}, shell-style-def {:name blancas.kern.lexer/shell-style-def, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 81, :column 1, :end-line 81, :end-column 21, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 81, :column 6, :end-line 81, :end-column 21}, :doc "Lexical settings for shell-style languages.", :tag any}, braces {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 252, :column 10, :end-line 252, :end-column 16, :dynamic true, :arglists (quote ([p])), :doc "Applies parser p skiping over surrounding braces.\n          Calls (trim) after the opening brace, after p, and after\n          the closing brace."}, :name blancas.kern.lexer/braces, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 252, :end-line 252, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Applies parser p skiping over surrounding braces.\n          Calls (trim) after the opening brace, after p, and after\n          the closing brace."}, c-esc-uni {:name blancas.kern.lexer/c-esc-uni, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 447, :column 1, :end-line 447, :end-column 15, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 447, :column 6, :end-line 447, :end-column 15}, :doc "Parses a long unicode escape code; the result is the encoded char.", :tag any}, h-esc-oct {:name blancas.kern.lexer/h-esc-oct, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 471, :column 1, :end-line 471, :end-column 15, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 471, :column 6, :end-line 471, :end-column 15}, :doc "Parses a Haskell octal escape code; the result is the encoded char.", :tag any}, dec-lit {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 214, :column 10, :end-line 214, :end-column 17, :dynamic true, :arglists (quote ([])), :doc "Parses a decimal number as Long or BigInt depending on the\n          magnitude or if it ends with N. Calls (trim) afterward."}, :name blancas.kern.lexer/dec-lit, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 214, :end-line 214, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a decimal number as Long or BigInt depending on the\n          magnitude or if it ends with N. Calls (trim) afterward."}, comma {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 274, :column 10, :end-line 274, :end-column 15, :dynamic true, :arglists (quote ([])), :doc "Parses a single comma; then calls (trim)."}, :name blancas.kern.lexer/comma, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 274, :end-line 274, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a single comma; then calls (trim)."}, semi-sep {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 286, :column 10, :end-line 286, :end-column 18, :dynamic true, :arglists (quote ([])), :doc "Applies parser p zero or more times, skiping over separating\n          semicolons. Calls (trim) after each p and semicolon."}, :name blancas.kern.lexer/semi-sep, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 286, :end-line 286, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Applies parser p zero or more times, skiping over separating\n          semicolons. Calls (trim) after each p and semicolon."}, esc-oct {:name blancas.kern.lexer/esc-oct, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 413, :column 1, :end-line 413, :end-column 13, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 413, :column 6, :end-line 413, :end-column 13}, :doc "Parses an octal escape code; the result is the encoded char.", :tag any}, block-comment {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 377, :column 7, :end-line 377, :end-column 20, :arglists (quote ([rec])), :doc "Parses a block comment."}, :name blancas.kern.lexer/block-comment, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 20, :method-params ([rec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 377, :end-line 377, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rec])), :doc "Parses a block comment."}, float-suffix {:name blancas.kern.lexer/float-suffix, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 537, :column 1, :end-line 537, :end-column 18, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 537, :column 6, :end-line 537, :end-column 18}, :tag any}, float-lit {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 229, :column 10, :end-line 229, :end-column 19, :dynamic true, :arglists (quote ([])), :doc "Parses a floating-point number as Double or BigDecimal depending\n          on the magnitude or if it ends with M. It cannot start with a\n          period. The first period found must be followed by at least one\n          digit. Calls (trim) afterward."}, :name blancas.kern.lexer/float-lit, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 229, :end-line 229, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a floating-point number as Double or BigDecimal depending\n          on the magnitude or if it ends with M. It cannot start with a\n          period. The first period found must be followed by at least one\n          digit. Calls (trim) afterward."}, field {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 181, :column 10, :end-line 181, :end-column 15, :dynamic true, :arglists (quote ([cs])), :doc "Parses an unquoted text field terminated by any character\n          in cs. Calls (trim) afterwards."}, :name blancas.kern.lexer/field, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 15, :method-params ([cs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 181, :end-line 181, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cs])), :doc "Parses an unquoted text field terminated by any character\n          in cs. Calls (trim) afterwards."}, semi {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 270, :column 10, :end-line 270, :end-column 14, :dynamic true, :arglists (quote ([])), :doc "Parses a single semicolon; then calls (trim)."}, :name blancas.kern.lexer/semi, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 270, :end-line 270, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a single semicolon; then calls (trim)."}, string-lit {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 200, :column 10, :end-line 200, :end-column 20, :dynamic true, :arglists (quote ([])), :doc "Parses a string literal according to the :type setting. The\n          common syntax is any number of symbols in double quotes\n          with the usual escape codes. Calls (trim) afterward.\n\n          The following styles add escaped characters:\n\n          :basic   \\b \\t \\n \\f \\r \\' \\\" \\/\n          :C       :basic + \\0ooo \\0xnn \\unnnnnnnn\n          :Haskell :basic + \\nnnn \\onnnn \\xnnnn\n          :Java    :basic + \\0ooo \\unnnn\n          :Shell   :basic + \\0ooo \\0xnn \\unnnnnnnn"}, :name blancas.kern.lexer/string-lit, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 200, :end-line 200, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a string literal according to the :type setting. The\n          common syntax is any number of symbols in double quotes\n          with the usual escape codes. Calls (trim) afterward.\n\n          The following styles add escaped characters:\n\n          :basic   \\b \\t \\n \\f \\r \\' \\\" \\/\n          :C       :basic + \\0ooo \\0xnn \\unnnnnnnn\n          :Haskell :basic + \\nnnn \\onnnn \\xnnnn\n          :Java    :basic + \\0ooo \\unnnn\n          :Shell   :basic + \\0ooo \\0xnn \\unnnnnnnn"}, char-lit {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 186, :column 10, :end-line 186, :end-column 18, :dynamic true, :arglists (quote ([])), :doc "Parses a character literal according to the :type setting. The\n          common syntax is a symbol in single quotes with the usual\n          escape codes. Calls (trim) afterwards.\n\n          The following styles add escaped characters:\n\n          :basic   \\b \\t \\n \\f \\r \\' \\\" \\/\n          :C       :basic + \\0ooo \\0xnn \\unnnnnnnn\n          :Haskell :basic + \\nnnn \\onnnn \\xnnnn\n          :Java    :basic + \\0ooo \\unnnn\n          :Shell   :basic + \\0ooo \\0xnn \\unnnnnnnn"}, :name blancas.kern.lexer/char-lit, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 186, :end-line 186, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a character literal according to the :type setting. The\n          common syntax is a symbol in single quotes with the usual\n          escape codes. Calls (trim) afterwards.\n\n          The following styles add escaped characters:\n\n          :basic   \\b \\t \\n \\f \\r \\' \\\" \\/\n          :C       :basic + \\0ooo \\0xnn \\unnnnnnnn\n          :Haskell :basic + \\nnnn \\onnnn \\xnnnn\n          :Java    :basic + \\0ooo \\unnnn\n          :Shell   :basic + \\0ooo \\0xnn \\unnnnnnnn"}, sym {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 139, :column 10, :end-line 139, :end-column 13, :dynamic true, :arglists (quote ([c])), :doc "Parses a single character c. Compares according to\n          :case-sensitive. Calls (trim) afterwards."}, :name blancas.kern.lexer/sym, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 13, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Parses a single character c. Compares according to\n          :case-sensitive. Calls (trim) afterwards."}, int-suffix {:name blancas.kern.lexer/int-suffix, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 534, :column 1, :end-line 534, :end-column 16, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 534, :column 6, :end-line 534, :end-column 16}, :tag any}, char-parser {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 511, :column 7, :end-line 511, :end-column 18, :arglists (quote ([lex f])), :doc "Parses character literals delimited by single quotes."}, :name blancas.kern.lexer/char-parser, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 18, :method-params ([lex f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 511, :end-line 511, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lex f])), :doc "Parses character literals delimited by single quotes."}, colon {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 278, :column 10, :end-line 278, :end-column 15, :dynamic true, :arglists (quote ([])), :doc "Parses a single colon; then calls (trim)."}, :name blancas.kern.lexer/colon, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 278, :end-line 278, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a single colon; then calls (trim)."}, esc-uni {:name blancas.kern.lexer/esc-uni, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 423, :column 1, :end-line 423, :end-column 13, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 423, :column 6, :end-line 423, :end-column 13}, :doc "Parses a unicode escape code; the result is the encoded char.", :tag any}, token {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 158, :column 10, :end-line 158, :end-column 15, :dynamic true, :arglists (quote ([cs] [cs & more])), :doc "Parses a specific string, not necessarily delimited. If more\n          than one are given it will try each choice in turn. Compares\n          according to :case-sensitive. Calls (trim) afterwards.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([cs]), :arglists ([cs] [cs & more]), :arglists-meta (nil nil)}}, :name blancas.kern.lexer/token, :variadic true, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([cs]), :arglists ([cs] [cs & more]), :arglists-meta (nil nil)}, :method-params ([cs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 158, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists ([cs] [cs & more]), :doc "Parses a specific string, not necessarily delimited. If more\n          than one are given it will try each choice in turn. Compares\n          according to :case-sensitive. Calls (trim) afterwards."}, lexeme {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 135, :column 10, :end-line 135, :end-column 16, :dynamic true, :arglists (quote ([p])), :doc "Applies parser p, then calls (trim)."}, :name blancas.kern.lexer/lexeme, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Applies parser p, then calls (trim)."}, ->LanguageDef {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 24, :column 12, :end-line 24, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([type comment-start comment-end comment-line nested-comments identifier-start identifier-letter reserved-names case-sensitive line-continuation trim-newline leading-sign]))}, :name blancas.kern.lexer/->LanguageDef, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 23, :method-params ([type comment-start comment-end comment-line nested-comments identifier-start identifier-letter reserved-names case-sensitive line-continuation trim-newline leading-sign]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 24, :end-line 24, :max-fixed-arity 12, :fn-var true, :arglists (quote ([type comment-start comment-end comment-line nested-comments identifier-start identifier-letter reserved-names case-sensitive line-continuation trim-newline leading-sign]))}, c-style-def {:name blancas.kern.lexer/c-style-def, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 75, :column 1, :end-line 75, :end-column 17, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 75, :column 6, :end-line 75, :end-column 17}, :doc "Lexical settings for C-style languages.", :tag any}, hex-lit {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 224, :column 10, :end-line 224, :end-column 17, :dynamic true, :arglists (quote ([])), :doc "Parses a hexadecimal number as Long or BigInt depending on the\n          magnitude or if it ends with N. Calls (trim) afterward."}, :name blancas.kern.lexer/hex-lit, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 224, :end-line 224, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a hexadecimal number as Long or BigInt depending on the\n          magnitude or if it ends with N. Calls (trim) afterward."}, h-esc-hex {:name blancas.kern.lexer/h-esc-hex, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 491, :column 1, :end-line 491, :end-column 15, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 491, :column 6, :end-line 491, :end-column 15}, :doc "Parses a Haskell hex escape code; the result is the encoded char.", :tag any}, h-esc-dec {:name blancas.kern.lexer/h-esc-dec, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 481, :column 1, :end-line 481, :end-column 15, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 481, :column 6, :end-line 481, :end-column 15}, :doc "Parses a Haskell decimal escape code; the result is the encoded char.", :tag any}, line-comment {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 350, :column 7, :end-line 350, :end-column 19, :arglists (quote ([rec])), :doc "Parses a line comment."}, :name blancas.kern.lexer/line-comment, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 19, :method-params ([rec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 350, :end-line 350, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rec])), :doc "Parses a line comment."}, word {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 165, :column 10, :end-line 165, :end-column 14, :dynamic true, :arglists (quote ([cs] [cs & more])), :doc "Parses a specific string; must be delimited by any character not\n          parsed by :identifier-letter. If more than one are given it will\n          try each choice in turn. Compares according to :case-sensitive.\n          Calls (trim) afterwards.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([cs]), :arglists ([cs] [cs & more]), :arglists-meta (nil nil)}}, :name blancas.kern.lexer/word, :variadic true, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([cs]), :arglists ([cs] [cs & more]), :arglists-meta (nil nil)}, :method-params ([cs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists ([cs] [cs & more]), :doc "Parses a specific string; must be delimited by any character not\n          parsed by :identifier-letter. If more than one are given it will\n          try each choice in turn. Compares according to :case-sensitive.\n          Calls (trim) afterwards."}, identifier {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 173, :column 10, :end-line 173, :end-column 20, :dynamic true, :arglists (quote ([])), :doc "Parses an unquoted string suitable for an identifier or a name.\n          The start of the input is defined by :identifier-start, and\n          subsequent symbols by :identtifier-letter. It will check that\n          the parsed value not be in the list of :reserved-names, if any,\n          comparing according to :case-sensitive. Calls (trim) afterwards."}, :name blancas.kern.lexer/identifier, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 173, :end-line 173, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses an unquoted string suitable for an identifier or a name.\n          The start of the input is defined by :identifier-start, and\n          subsequent symbols by :identtifier-letter. It will check that\n          the parsed value not be in the list of :reserved-names, if any,\n          comparing according to :case-sensitive. Calls (trim) afterwards."}, block-nested {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 359, :column 7, :end-line 359, :end-column 19, :arglists (quote ([rec])), :doc "Parses the contents and end of a nested block comment."}, :name blancas.kern.lexer/block-nested, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 19, :method-params ([rec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rec])), :doc "Parses the contents and end of a nested block comment."}, comma-sep1 {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 301, :column 10, :end-line 301, :end-column 20, :dynamic true, :arglists (quote ([])), :doc "Applies parser p one or more times, skiping over separating\n          commas. Calls (trim) after each p and comma."}, :name blancas.kern.lexer/comma-sep1, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 301, :end-line 301, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Applies parser p one or more times, skiping over separating\n          commas. Calls (trim) after each p and comma."}, new-line {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 144, :column 10, :end-line 144, :end-column 18, :dynamic true, :arglists (quote ([])), :doc "Parses a new line, UNIX or Windows style; then calls (trim)."}, :name blancas.kern.lexer/new-line, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 144, :end-line 144, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Parses a new line, UNIX or Windows style; then calls (trim)."}, trim {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 128, :column 10, :end-line 128, :end-column 14, :dynamic true, :arglists (quote ([])), :doc "Skips over any whitespace, including comments (if defined), at\n          the start of the input. Whether newline characters are removed\n          as whitespace is configured by :trim-newline. When that setting\n          is true, the setting :line-continuation is activated."}, :name blancas.kern.lexer/trim, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 128, :end-line 128, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Skips over any whitespace, including comments (if defined), at\n          the start of the input. Whether newline characters are removed\n          as whitespace is configured by :trim-newline. When that setting\n          is true, the setting :line-continuation is activated."}, space-ascii {:name blancas.kern.lexer/space-ascii, :file "resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 391, :column 1, :end-line 391, :end-column 17, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/lexer.cljc", :line 391, :column 6, :end-line 391, :end-column 17}, :tag number}}, :cljs.spec/registry-ref [], :require-macros {k blancas.kern.core, blancas.kern.core blancas.kern.core}, :cljs.analyzer/constants {:seen #{identifier-letter dot :nil-lit one-of brackets :angles semi-sep1 :identifier-start :none-of :end-char :Shell :esc-code-j oct-lit bool-lit :bad-hex-h comma-sep line-continuation :esc-code-c :esc-code :else :parens :braces nil-lit angles :comment-start :dec-lit identifier-start :comma none-of :trim-newline :leading-sign :end-string :semi-sep :field :type :float-lit :bad-oct-h parens :semi :C :string-lit :char-lit braces :sym :colon :nested-comments dec-lit comma comment-start :token :lexeme :hex-lit semi-sep trim-newline leading-sign float-lit :end-comment :word field type semi :case-sensitive string-lit char-lit :Java sym :comma-sep1 :identifier colon nested-comments :esc-code-h :reserved-names :reserved :new-line :trim :comment-end token :basic lexeme :comment-line :identifier-letter hex-lit :dot :one-of word :brackets :semi-sep1 case-sensitive :bad-dec-h identifier reserved-names comma-sep1 new-line trim comment-end :oct-lit :bool-lit :comma-sep comment-line :line-continuation :Haskell :bad-octal}, :order [:type :comment-start :comment-end :comment-line :nested-comments :identifier-start :identifier-letter :reserved-names :case-sensitive :line-continuation :trim-newline :leading-sign type comment-start comment-end comment-line nested-comments identifier-start identifier-letter reserved-names case-sensitive line-continuation trim-newline leading-sign :basic :Haskell :Java :C :Shell :trim :lexeme :sym :new-line :one-of :none-of :token :word :identifier :field :char-lit :string-lit :dec-lit :oct-lit :hex-lit :float-lit :bool-lit :nil-lit :parens :braces :angles :brackets :semi :comma :colon :dot :semi-sep :semi-sep1 :comma-sep :comma-sep1 trim lexeme sym new-line one-of none-of token word identifier field char-lit string-lit dec-lit oct-lit hex-lit float-lit bool-lit nil-lit parens braces angles brackets semi comma colon dot semi-sep semi-sep1 comma-sep comma-sep1 :end-comment :esc-code :bad-octal :esc-code-j :esc-code-c :bad-oct-h :bad-dec-h :bad-hex-h :esc-code-h :end-char :end-string :else :reserved]}, :doc "The Kern Lexer library."}