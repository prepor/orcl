{:rename-macros {}, :renames {}, :use-macros {return blancas.kern.core, >> blancas.kern.core, <|> blancas.kern.core}, :excludes #{}, :name blancas.kern.expr, :imports nil, :requires {k blancas.kern.core, blancas.kern.core blancas.kern.core, i18n blancas.kern.i18n, blancas.kern.i18n blancas.kern.i18n, c-style blancas.kern.lexer.c-style, blancas.kern.lexer.c-style blancas.kern.lexer.c-style}, :cljs.spec/speced-vars [], :uses {return blancas.kern.core, >> blancas.kern.core, <|> blancas.kern.core}, :defs {uni-op {:name blancas.kern.expr/uni-op, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 162, :column 1, :end-line 162, :end-column 12, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 162, :column 6, :end-line 162, :end-column 12}, :doc "Unary prefix operator: logical not or numeric minus.", :tag any}, chainl {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 33, :column 7, :end-line 33, :end-column 13, :arglists (quote ([p op a])), :doc "Parses a value or a sequence or values separated by a binary operator.\n   If there's no initial value, defaults to a. Associates to the left."}, :name blancas.kern.expr/chainl, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 13, :method-params ([p op a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p op a])), :doc "Parses a value or a sequence or values separated by a binary operator.\n   If there's no initial value, defaults to a. Associates to the left."}, and-op {:name blancas.kern.expr/and-op, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 186, :column 1, :end-line 186, :end-column 12, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 186, :column 6, :end-line 186, :end-column 12}, :doc "Parses the logical AND operator.", :tag any}, postfix1* {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 136, :column 7, :end-line 136, :end-column 16, :arglists (quote ([tok p op])), :doc "Parses an operand p followed by zero or more operators op. It builds\n   an AST node for each parsed function, where the operand is a node\n   for a value or a previous  application of a postfix operator."}, :name blancas.kern.expr/postfix1*, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 16, :method-params ([tok p op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tok p op])), :doc "Parses an operand p followed by zero or more operators op. It builds\n   an AST node for each parsed function, where the operand is a node\n   for a value or a previous  application of a postfix operator."}, chainr1 {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 39, :column 7, :end-line 39, :end-column 14, :arglists (quote ([p op])), :doc "Parses p; as long as there is a binary operator op, reads the op and\n   calls itself to compute the rest of the expression, then it applies\n   the operator on both values. The operator associates to the right."}, :name blancas.kern.expr/chainr1, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 14, :method-params ([p op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p op])), :doc "Parses p; as long as there is a binary operator op, reads the op and\n   calls itself to compute the rest of the expression, then it applies\n   the operator on both values. The operator associates to the right."}, prefix1 {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 92, :column 7, :end-line 92, :end-column 14, :arglists (quote ([p op])), :doc "Parses zero or more operators op before an operand p. It applies\n   the parsed functions to the operand in reverse order of parsing."}, :name blancas.kern.expr/prefix1, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 14, :method-params ([p op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p op])), :doc "Parses zero or more operators op before an operand p. It applies\n   the parsed functions to the operand in reverse order of parsing."}, postfix1 {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 121, :column 7, :end-line 121, :end-column 15, :arglists (quote ([p op])), :doc "Parses an operand p followed by zero or more operators. It applies the\n   parsed functions to the operand or the result of a previous application."}, :name blancas.kern.expr/postfix1, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 15, :method-params ([p op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p op])), :doc "Parses an operand p followed by zero or more operators. It applies the\n   parsed functions to the operand or the result of a previous application."}, pow-op {:name blancas.kern.expr/pow-op, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 157, :column 1, :end-line 157, :end-column 12, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 157, :column 6, :end-line 157, :end-column 12}, :doc "Parses the POW operator.", :tag any}, prefix* {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 115, :column 7, :end-line 115, :end-column 14, :arglists (quote ([tok p op a])), :doc "Like prefix1*, but both the operator and operand are optional.\n   If no operand is given, it returns the default value a."}, :name blancas.kern.expr/prefix*, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 14, :method-params ([tok p op a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tok p op a])), :doc "Like prefix1*, but both the operator and operand are optional.\n   If no operand is given, it returns the default value a."}, chainr* {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 85, :column 7, :end-line 85, :end-column 14, :arglists (quote ([tok p op a])), :doc "Parses a value or a sequence or values with infix binary operators.\n   If there's no initial value, defaults to a. Associates to the right.\n   The operator associates to the right."}, :name blancas.kern.expr/chainr*, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 14, :method-params ([tok p op a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tok p op a])), :doc "Parses a value or a sequence or values with infix binary operators.\n   If there's no initial value, defaults to a. Associates to the right.\n   The operator associates to the right."}, rel-op {:name blancas.kern.expr/rel-op, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 180, :column 1, :end-line 180, :end-column 12, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 180, :column 6, :end-line 180, :end-column 12}, :doc "Parses one of the relational operators.", :tag any}, chainl1 {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 23, :column 7, :end-line 23, :end-column 14, :arglists (quote ([p op])), :doc "Parses p; as long as there is a binary operator op, reads the op and\n   another instance of p, then applies the operator on both values.\n   The operator associates to the left."}, :name blancas.kern.expr/chainl1, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 14, :method-params ([p op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p op])), :doc "Parses p; as long as there is a binary operator op, reads the op and\n   another instance of p, then applies the operator on both values.\n   The operator associates to the left."}, add-op {:name blancas.kern.expr/add-op, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 174, :column 1, :end-line 174, :end-column 12, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 174, :column 6, :end-line 174, :end-column 12}, :doc "Additive operator: addition or subtraction.", :tag any}, chainr {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 49, :column 7, :end-line 49, :end-column 13, :arglists (quote ([p op a])), :doc "Parses a value or a sequence or values with infix binary operators.\n   If there's no initial value, defaults to a. Associates to the right."}, :name blancas.kern.expr/chainr, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 13, :method-params ([p op a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p op a])), :doc "Parses a value or a sequence or values with infix binary operators.\n   If there's no initial value, defaults to a. Associates to the right."}, prefix1* {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 106, :column 7, :end-line 106, :end-column 15, :arglists (quote ([tok p op])), :doc "Parses zero or more operators op before an operand p. It builds an\n   AST node for each parsed function, where the operand is a node\n   for a value or a further application of a prefix operator."}, :name blancas.kern.expr/prefix1*, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 15, :method-params ([tok p op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tok p op])), :doc "Parses zero or more operators op before an operand p. It builds an\n   AST node for each parsed function, where the operand is a node\n   for a value or a further application of a prefix operator."}, prefix {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 100, :column 7, :end-line 100, :end-column 13, :arglists (quote ([p op a])), :doc "Like prefix1, but both the operator and operand are optional.\n   If no operand is given, it returns the default value a."}, :name blancas.kern.expr/prefix, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 13, :method-params ([p op a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p op a])), :doc "Like prefix1, but both the operator and operand are optional.\n   If no operand is given, it returns the default value a."}, postfix {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 130, :column 7, :end-line 130, :end-column 14, :arglists (quote ([p op a])), :doc "Like postfix1, but both the operator and operand are optional.\n   If no operand is given, it returns the default value a."}, :name blancas.kern.expr/postfix, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 14, :method-params ([p op a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p op a])), :doc "Like postfix1, but both the operator and operand are optional.\n   If no operand is given, it returns the default value a."}, postfix* {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 146, :column 7, :end-line 146, :end-column 15, :arglists (quote ([tok p op a])), :doc "Like postfix1*, but both the operator and operand are optional.\n   If no operand is given, it returns the default value a."}, :name blancas.kern.expr/postfix*, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 15, :method-params ([tok p op a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tok p op a])), :doc "Like postfix1*, but both the operator and operand are optional.\n   If no operand is given, it returns the default value a."}, chainr1* {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 73, :column 7, :end-line 73, :end-column 15, :arglists (quote ([tok p op])), :doc "Parses p; as long as there is a binary operator op, reads the op and\n   calls itself to make the rest of the expression AST, then it makes\n   an AST node with the operator on both values. The operator associates\n   to the right."}, :name blancas.kern.expr/chainr1*, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 15, :method-params ([tok p op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tok p op])), :doc "Parses p; as long as there is a binary operator op, reads the op and\n   calls itself to make the rest of the expression AST, then it makes\n   an AST node with the operator on both values. The operator associates\n   to the right."}, or-op {:name blancas.kern.expr/or-op, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 191, :column 1, :end-line 191, :end-column 11, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 191, :column 6, :end-line 191, :end-column 11}, :doc "Parses the logical OR operator.", :tag any}, mul-op {:name blancas.kern.expr/mul-op, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 168, :column 1, :end-line 168, :end-column 12, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 168, :column 6, :end-line 168, :end-column 12}, :doc "Multiplicative operator: multiplication, division, or modulo.", :tag any}, chainl1* {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 55, :column 7, :end-line 55, :end-column 15, :arglists (quote ([tok p op])), :doc "Parses p; as long as there is a binary operator op, reads the op and\n   another p, then makes an AST node with the operator on both values.\n   The operator associates to the left."}, :name blancas.kern.expr/chainl1*, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 15, :method-params ([tok p op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tok p op])), :doc "Parses p; as long as there is a binary operator op, reads the op and\n   another p, then makes an AST node with the operator on both values.\n   The operator associates to the left."}, chainl* {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/blancas/kern/expr.cljc", :line 66, :column 7, :end-line 66, :end-column 14, :arglists (quote ([tok p op a])), :doc "Parses a value or a sequence or values separated by a binary operator.\n   If there's no initial value, defaults to a. Associates to the left.\n   The resulting value is an AST node."}, :name blancas.kern.expr/chainl*, :variadic false, :file "resources/public/js/compiled/min/blancas/kern/expr.cljc", :end-column 14, :method-params ([tok p op a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tok p op a])), :doc "Parses a value or a sequence or values separated by a binary operator.\n   If there's no initial value, defaults to a. Associates to the left.\n   The resulting value is an AST node."}}, :cljs.spec/registry-ref [], :require-macros {k blancas.kern.core, blancas.kern.core blancas.kern.core}, :cljs.analyzer/constants {:seen #{:op :token :right :left}, :order [:token :op :left :right]}, :doc "Support for the evaluation of expressions."}