{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name orcl.utils, :imports nil, :requires {str clojure.string, clojure.string clojure.string, hashify orcl.utils.hashify, orcl.utils.hashify orcl.utils.hashify}, :cljs.spec/speced-vars [], :uses nil, :defs {sha {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/orcl/utils.cljc", :line 9, :column 7, :end-line 9, :end-column 10, :arglists (quote ([x]))}, :name orcl.utils/sha, :variadic false, :file "resources/public/js/compiled/min/orcl/utils.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, with-sha {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/orcl/utils.cljc", :line 19, :column 7, :end-line 19, :end-column 15, :arglists (quote ([node]))}, :name orcl.utils/with-sha, :variadic false, :file "resources/public/js/compiled/min/orcl/utils.cljc", :end-column 15, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, map-vals {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/orcl/utils.cljc", :line 22, :column 7, :end-line 22, :end-column 15, :arglists (quote ([f m])), :doc "Build map k -> (f v) for [k v] in map, preserving the initial type"}, :name orcl.utils/map-vals, :variadic false, :file "resources/public/js/compiled/min/orcl/utils.cljc", :end-column 15, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m])), :doc "Build map k -> (f v) for [k v] in map, preserving the initial type"}, index-by {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/orcl/utils.cljc", :line 33, :column 7, :end-line 33, :end-column 15, :arglists (quote ([f coll])), :doc "Returns a map of the elements of `coll` keyed by the result of `f` on each\n   element.  The value at each key will be a single element (in contrast to\n   `clojure.core/group-by`).  Therefore `f` should generally return an unique\n   key for every element - otherwise elements get discarded."}, :name orcl.utils/index-by, :variadic false, :file "resources/public/js/compiled/min/orcl/utils.cljc", :end-column 15, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :doc "Returns a map of the elements of `coll` keyed by the result of `f` on each\n   element.  The value at each key will be a single element (in contrast to\n   `clojure.core/group-by`).  Therefore `f` should generally return an unique\n   key for every element - otherwise elements get discarded."}, assoc-when {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/orcl/utils.cljc", :line 41, :column 7, :end-line 41, :end-column 17, :arglists (quote ([m & kvs])), :doc "Like assoc but only assocs when value is truthy", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(m kvs)], :arglists ([m & kvs]), :arglists-meta (nil)}}, :name orcl.utils/assoc-when, :variadic true, :file "resources/public/js/compiled/min/orcl/utils.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(m kvs)], :arglists ([m & kvs]), :arglists-meta (nil)}, :method-params [(m kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists ([m & kvs]), :doc "Like assoc but only assocs when value is truthy"}, ast-walk {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/orcl/utils.cljc", :line 51, :column 7, :end-line 51, :end-column 15, :arglists (quote ([inner outer ast]))}, :name orcl.utils/ast-walk, :variadic false, :file "resources/public/js/compiled/min/orcl/utils.cljc", :end-column 15, :method-params ([inner outer ast]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 3, :fn-var true, :arglists (quote ([inner outer ast]))}, ast-postwalk {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/orcl/utils.cljc", :line 77, :column 7, :end-line 77, :end-column 19, :arglists (quote ([f form]))}, :name orcl.utils/ast-postwalk, :variadic false, :file "resources/public/js/compiled/min/orcl/utils.cljc", :end-column 19, :method-params ([f form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f form]))}, ast-prewalk {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/orcl/utils.cljc", :line 81, :column 7, :end-line 81, :end-column 18, :arglists (quote ([f form]))}, :name orcl.utils/ast-prewalk, :variadic false, :file "resources/public/js/compiled/min/orcl/utils.cljc", :end-column 18, :method-params ([f form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f form]))}, todo-exception {:protocol-inline nil, :meta {:file "/home/jenkins/workspace/orcl_master-BWHZEOIMVRLLYGQYEFB6RSZ6C6P6745JA24OSQTEWBYF6Z3JNJXQ/demo/resources/public/js/compiled/min/orcl/utils.cljc", :line 85, :column 7, :end-line 85, :end-column 21, :arglists (quote ([]))}, :name orcl.utils/todo-exception, :variadic false, :file "resources/public/js/compiled/min/orcl/utils.cljc", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {macro orcl.utils.macro, orcl.utils.macro orcl.utils.macro}, :cljs.analyzer/constants {:seen #{:args :else :include :if :params :type :node :decl :instances :expr :pairs :values :defs :then :right :def :target :declarations :body :guard :sha :left}, :order [:sha :else :node :left :right :if :then :body :params :guard :expr :def :type :decl :include :declarations :defs :instances :target :args :values :pairs]}, :doc nil}